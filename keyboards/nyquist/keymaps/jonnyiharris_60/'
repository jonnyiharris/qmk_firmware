#include QMK_KEYBOARD_H
#include "pointing_device.h"

extern keymap_config_t keymap_config;

#define DELTA_IS_UNSET 9999

// Each layer gets a name for readability, which is then used in the keymap matrix below.
// The underscores don't mean anything - you can have a layer called STUFF or any other name.
// Layer names don't all need to be of the same length, obviously, and you can also skip them
// entirely and just use numbers.
#define _QWERTY 0
#define _COLEMAK 1
#define _VIM 2
#define _MOUSE 3

enum custom_keycodes {
  QWERTY = SAFE_RANGE,
  COLEMAK,
  VIM,
  MOUSE,
  DYNAMIC_MACRO_RANGE,
  BIMS_L,
  BIMS_R,
  BIMS_U,
  BIMS_D,
  BIMS_RS,
};

#include "dynamic_macro.h"

// Fillers to make layering more clear
#define _______ KC_TRNS
#define X KC_NO
#define WD_BSPC LCTL(KC_BSPC)
#define COPY LCTL(KC_INS)
#define PASTE LSFT(KC_INS)
#define WD_RGHT LCTL(KC_RGHT)
#define WD_LEFT LCTL(KC_LEFT)
#define M_START DYN_REC_START1
#define M_STOP  DYN_REC_STOP
#define M_PLAY  DYN_MACRO_PLAY1
const uint16_t PROGMEM keymaps[][MATRIX_ROWS][MATRIX_COLS] = {

/* Qwerty
 * ,-----------------------------------------------------------------------------------.
 * |   `  |   1  |   2  |   3  |   4  |   5  |   6  |   7  |   8  |   9  |   0  | Bksp |
 * |------+------+------+------+------+------+------+------+------+------+------+------|
 * | Tab  |   Q  |   W  |   E  |   R  |   T  |   Y  |   U  |   I  |   O  |   P  | Del  |
 * |------+------+------+------+------+-------------+------+------+------+------+------|
 * | Esc  |   A  |   S  |   D  |   F  |   G  |   H  |   J  |   K  |   L  |   ;  |  "   |
 * |------+------+------+------+------+------|------+------+------+------+------+------|
 * | Shift|   Z  |   X  |   C  |   V  |   B  |   N  |   M  |   ,  |   .  |   /  |Enter |
 * |------+------+------+------+------+------+------+------+------+------+------+------|
 * |Adjust| Ctrl | Alt  | GUI  |Lower |Space |Space |Raise | Left | Down |  Up  |Right |
 * `-----------------------------------------------------------------------------------'
 */
[_QWERTY] = LAYOUT( \
  KC_GRV,  KC_1,    KC_2,    KC_3,    KC_4,    KC_5,    KC_6,    KC_7,    KC_8,    KC_9,    KC_0,    COLEMAK, \
  KC_TAB,  KC_Q,    KC_W,    KC_E,    KC_R,    KC_T,    KC_Y,    KC_U,    KC_I,    KC_O,    KC_P,    KC_BSLS, \
  KC_LCTL, KC_A,    KC_S,    KC_D,    KC_F,    KC_G,    KC_H,    KC_J,    KC_K,    KC_L,    KC_SCLN, KC_QUOT, \
  KC_LBRC, KC_Z,    KC_X,    KC_C,    KC_V,    KC_B,    KC_N,    KC_M,    KC_COMM, KC_DOT,  KC_SLSH, KC_RBRC, \
  X,       X,       KC_LGUI, KC_LALT, KC_LSFT, VIM,     KC_SPC,  KC_RSFT, MOUSE,   X,       KC_MINS, KC_EQL   \
),

/* Colemak
 * ,-----------------------------------------------------------------------------------.
 * |   `  |   1  |   2  |   3  |   4  |   5  |   6  |   7  |   8  |   9  |   0  | Bksp |
 * |------+------+------+------+------+------+------+------+------+------+------+------|
 * | Tab  |   Q  |   W  |   F  |   P  |   G  |   J  |   L  |   U  |   Y  |   ;  | Del  |
 * |------+------+------+------+------+-------------+------+------+------+------+------|
 * | Esc  |   A  |   R  |   S  |   T  |   D  |   H  |   N  |   E  |   I  |   O  |  "   |
 * |------+------+------+------+------+------|------+------+------+------+------+------|
 * | Shift|   Z  |   X  |   C  |   V  |   B  |   K  |   M  |   ,  |   .  |   /  |Enter |
 * |------+------+------+------+------+------+------+------+------+------+------+------|
 * |Adjust| Ctrl | Alt  | GUI  |Lower |Space |Space |Raise | Left | Down |  Up  |Right |
 * `-----------------------------------------------------------------------------------'
 */
[_COLEMAK] = LAYOUT( \
  _______, _______, _______, _______, _______, _______, _______, _______, _______, _______, _______, _______, \
  _______, KC_Q,    KC_W,    KC_F,    KC_P,    KC_G,    KC_J,    KC_L,    KC_U,    KC_Y,    KC_SCLN, _______, \
  _______, KC_A,    KC_R,    KC_S,    KC_T,    KC_D,    KC_H,    KC_N,    KC_E,    KC_I,    KC_O,    _______, \
  _______, KC_Z,    KC_X,    KC_C,    KC_V,    KC_B,    KC_K,    KC_M,    KC_COMM, KC_DOT,  KC_SLSH, _______, \
  _______, _______, _______, _______, _______, _______, _______, _______, _______, _______, _______, _______  \
),

/* Lower
 * ,-----------------------------------------------------------------------------------.
 * |   ~  |   !  |   @  |   #  |   $  |   %  |   ^  |   &  |   *  |   (  |   )  | Bksp |
 * |------+------+------+------+------+-------------+------+------+------+------+------|
 * |   ~  |   !  |   @  |   #  |   $  |   %  |   ^  |   &  |   *  |   (  |   )  | Del  |
 * |------+------+------+------+------+-------------+------+------+------+------+------|
 * | Del  |  F1  |  F2  |  F3  |  F4  |  F5  |  F6  |   _  |   +  |     |    \  |  |   |
 * |------+------+------+------+------+------|------+------+------+------+------+------|
 * |      |  F7  |  F8  |  F9  |  F10 |  F11 |  F12 |ISO ~ |ISO | |      |      |Enter |
 * |------+------+------+------+------+------+------+------+------+------+------+------|
 * |      |      |      |      |      |             |      | Next | Vol- | Vol+ | Play |
 * `-----------------------------------------------------------------------------------'
 */
[_VIM] = LAYOUT( \
  KC_F1,   KC_F2,   KC_F3,   KC_F4,   KC_F5,   KC_F6,   KC_F7,   KC_F8,   KC_F9,   KC_F10,  KC_F11,  KC_F12,  \
  _______, M_START, WD_BSPC, KC_END,  X,       X,       COPY,    KC_PGUP, X,       X,       PASTE,   KC_ESC,  \
  _______, KC_HOME, X,       KC_PGDN, WD_RGHT, X,       KC_LEFT, KC_DOWN, KC_UP,   KC_RGHT, X,       KC_ENT,  \
  _______, M_STOP,  KC_DEL,  X,       X,       WD_LEFT, X,       X,       X,       M_PLAY,  X,       _______, \
  _______, _______, _______, _______, _______, _______, KC_BSPC, _______, KC_RALT, KC_RCTL, KC_VOLD, KC_VOLU  \
),

/* Raise
 * ,-----------------------------------------------------------------------------------.
 * |   `  |   1  |   2  |   3  |   4  |   5  |   6  |   7  |   8  |   9  |   0  | Bksp |
 * |------+------+------+------+------+-------------+------+------+------+------+------|
 * |   `  |   1  |   2  |   3  |   4  |   5  |   6  |   7  |   8  |   9  |   0  | Del  |
 * |------+------+------+------+------+-------------+------+------+------+------+------|
 * | Del  |  F1  |  F2  |  F3  |  F4  |  F5  |  F6  |   -  |   =  |   [  |   ]  |  \   |
 * |------+------+------+------+------+------|------+------+------+------+------+------|
 * |      |  F7  |  F8  |  F9  |  F10 |  F11 |  F12 |ISO # |ISO / |      |      |Enter |
 * |------+------+------+------+------+------+------+------+------+------+------+------|
 * |      |      |      |      |      |             |      | Next | Vol- | Vol+ | Play |
 * `-----------------------------------------------------------------------------------'
 */
[_MOUSE] = LAYOUT( \
  _______, _______, _______, _______, _______, _______, _______, _______, _______, _______, _______, _______, \
  _______, _______, _______, _______, _______, _______, _______, _______, _______, _______, _______, _______, \
  _______, _______, _______, _______, BIMS_RS, _______, BIMS_L,  BIMS_D,  BIMS_U,  BIMS_R,  _______, _______, \
  _______, _______, _______, _______, _______, _______, _______, _______, _______, _______, _______, _______, \
  _______, _______, _______, _______, _______, _______, _______, _______, _______, _______, _______, _______  \
),


};

uint16_t prev_x_delta = DELTA_IS_UNSET;
uint16_t prev_y_delta = DELTA_IS_UNSET;
bool process_binary_mouse_search( uint16_t keycode, keyrecord_t *record ){
  switch ( keycode ){
    case BIMS_L:
    case BIMS_R:
    case BIMS_U:
    case BIMS_D:
    case BIMS_RS:
      break;
    default:
      return true;
  }

  report_mouse_t currentReport = pointing_device_get_report();

  switch ( keycode ){
    case BIMS_L:
      if ( prev_x_delta == DELTA_IS_UNSET ) prev_x_delta = -127;
      else if ( prev_x_delta > 0 ) prev_x_delta = -prev_x_delta/2;
      currentReport.x = prev_x_delta;
      break;
    case BIMS_R:
      if ( prev_x_delta == DELTA_IS_UNSET ) prev_x_delta = 127;
      else if ( prev_x_delta < 0 ) prev_x_delta = -prev_x_delta/2;
      currentReport.x = prev_x_delta;
      break;
    case BIMS_U:
      if ( prev_y_delta == DELTA_IS_UNSET ) prev_y_delta = -127;
      else if ( prev_y_delta > 0 ) prev_y_delta = -prev_y_delta/2;
      currentReport.y = prev_y_delta;
      break;
    case BIMS_D:
      if ( prev_y_delta == DELTA_IS_UNSET ) prev_y_delta = 127;
      else if ( prev_y_delta < 0 ) prev_y_delta = -prev_y_delta/2;
      currentReport.y = prev_y_delta;
      break;
    case BIMS_RS:
      prev_x_delta = DELTA_IS_UNSET;
      prev_y_delta = DELTA_IS_UNSET;
      break;
    default:
      return true;
  }
  pointing_device_set_report( currentReport );
  return false;
}


bool process_record_user(uint16_t keycode, keyrecord_t *record) {
  if (!process_record_dynamic_macro(keycode, record)) {
    return false;
  }

  if ( !process_binary_mouse_search(keycode,record) ) {
    return false;
  }
  switch (keycode) {
    case COLEMAK:
      if (record->event.pressed) {
        layer_invert(_COLEMAK);
      }
      return false;
    case VIM:
      if (record->event.pressed) {
        layer_on(_VIM);
      } else {
        layer_off(_VIM);
      }
      return false;
    case MOUSE:
      if (record->event.pressed) {
        layer_on(_MOUSE);
      } else {
        layer_off(_MOUSE);
      }
      return false;
  }
  return true;
}
